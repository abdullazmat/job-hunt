Commit 1 : Initialized backend files with package.json and index.js setup

1. Created two folders frontend and backend
2. Run command "npm init" in backend folder to initialize package.json file
3. Run command "npm i express mongoose jsonwebtoken bcryptjs cookie-parser dotenv cors" for install backages in backend.
4. Use "type" : "module" in package.json file in backend to use import statements.
5. Create an index file in backend to initialize express, cookieParser and core with app.use and use them and listen to a Port number defined

Commit 2 : Set up Mongo DB and create MongoDB function and Connect.
1. Use app.get and define a route to test whether port is functional or not.
2. Open mongo site and create new project with cluster and then set password. Connect to Database via VS code
connect option and copy the URL provided. Set network access to 0.0.0.0/0  to access database from anywhere.
3. Create env file in backend folder and define MONGO_URI copied from mongodb site and set PORT used in index.js of backend folder
4. Create Backend/Utils folder and create db.js file in it which includes mongodb connection setup in connectDB function defined.
5. Import the function connectDB created in Backend/Utils/db.js and initialize the function in app.listen function.


Commit 3 : Mongo DB Models Setup
1. Create a models folder in backend folder.
2. Create file user.model.js in models folder and define the rules in users Schema like name,email, passwords etc.
3.  Similarly create application.model.js, job.model.js amd company.model.js and define their rules and schemas
4. Use mongoose.Schemas.Types.ObjectId and give reference between linking models.
5. Finally  export each model with a name and declare the created schema in it.  


Commit 4 : Controllers Setup 
1. Created a controllers folder in backend folder for controllers setup.
2. We will create user controller logic for both register and login. For register function, we first make sure that all required fields are present in req.body. Then we check if email of user is unique or not. After that we will give a hashed password to user's password using bcryptjs. Then we will create User in the database.
3. For login controller, we first make sure all required input are present in req.body. If user email excits, we first compare that login password to hashed password in database. If password matches, we check if role matches with student or recruiter. We then pass the token Data and generate a new token. After that new user object is created and cookie is created with the success message of User Logged in Successfully.
4: User logout controller is created afterwards which clears the cookie token and expires it and shows
message of user logged out on successful execution.
5: Now we create the update user profile controller which takesform data from req.body and checks if all data
 is provided . Then it checks if user is verified by comparing its id with middleware. After all the checks, we update the data in database and send response back to user with the data  with success message. 


Commit 5 : User Routes and Middlewares Setup
1. Create a routes folder in backend and create user.route.js file and define routes using express Router for user registeration, login, logout and profile update with middleware "isAuthenticated" for verfification .
2.  Create middlewares folder and create file isAuthenticated.js and get token from cookies which is passed 
during user login. Now decode that token with jwt.verify method and pass the jwt key from env. After decoding 
token successfully, get userId from from that token and pass it to req and call next().
3. We will then use Insomnia to check request for different API;s like http://local:8000/api/v1/user/login and 
see the response. If the response is valid and working according to controllers defined, this means api is working fine and ready to go.


Commit 6 : Company Controller & API Routes
1. Create company.controller.js  in backend folder for company registration, get companies created by a user ,get company by id and update company controller.
2. Company Registration controller first checks company name in req.body . If its present, it gives error of company already present. If its a new company name, it will get created in Company database.
3. Next we will make controller which gets companies made by a logged in user. We first get the user id by by  
req.id, then we find that id in Company database. If no comapnies excist, we give error that no company found. Elso we give error 
4. If we wanna get company by its id, we make a getCompanyById controller and get its id from prams. Then we find that id from prams in database, if id excists, we show that company in response.
5. Lastly we will create update company controller by using findByIdandUpdate method. In updating profile, we
used manual save method for updating data. In update company profile controller, we first check get the data via 
req,body, then we get id by params and update data in object. Then we use findByIdAndUpdate method to first get company id and pass that updated object data and rule new:true. We then pass that data via response to user.
6. 








