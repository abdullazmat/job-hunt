Commit 1 : Initialized backend files with package.json and index.js setup

1. Created two folders frontend and backend
2. Run command "npm init" in backend folder to initialize package.json file
3. Run command "npm i express mongoose jsonwebtoken bcryptjs cookie-parser dotenv cors" for install backages in backend.
4. Use "type" : "module" in package.json file in backend to use import statements.
5. Create an index file in backend to initialize express, cookieParser and core with app.use and use them and listen to a Port number defined

Commit 2 : Set up Mongo DB and create MongoDB function and Connect.
1. Use app.get and define a route to test whether port is functional or not.
2. Open mongo site and create new project with cluster and then set password. Connect to Database via VS code
connect option and copy the URL provided. Set network access to 0.0.0.0/0  to access database from anywhere.
3. Create env file in backend folder and define MONGO_URI copied from mongodb site and set PORT used in index.js of backend folder
4. Create Backend/Utils folder and create db.js file in it which includes mongodb connection setup in connectDB function defined.
5. Import the function connectDB created in Backend/Utils/db.js and initialize the function in app.listen function.


Commit 3 : Mongo DB Models Setup
1. Create a models folder in backend folder.
2. Create file user.model.js in models folder and define the rules in users Schema like name,email, passwords etc.
3.  Similarly create application.model.js, job.model.js amd company.model.js and define their rules and schemas
4. Use mongoose.Schemas.Types.ObjectId and give reference between linking models.
5. Finally  export each model with a name and declare the created schema in it.  


Commit 4 : Controllers Setup 
1. Created a controllers folder in backend folder for controllers setup.
2. We will create user controller logic for both register and login. For register function, we first make sure that all required fields are present in req.body. Then we check if email of user is unique or not. After that we will give a hashed password to user's password using bcryptjs. Then we will create User in the database.
3. For login controller, we first make sure all required input are present in req.body. If user email excits, we first compare that login password to hashed password in database. If password matches, we check if role matches with student or recruiter. We then pass the token Data and generate a new token. After that new user object is created and cookie is created with the success message of User Logged in Successfully.
4: User logout controller is created afterwards which clears the cookie token and expires it and shows
message of user logged out on successful execution.
5: Now we create the update user profile controller which takesform data from req.body and checks if all data
 is provided . Then it checks if user is verified by comparing its id with middleware. After all the checks, we update the data in database and send response back to user with the data  with success message. 


Commit 5 : User Routes and Middlewares Setup
1. Create a routes folder in backend and create user.route.js file and define routes using express Router for user registeration, login, logout and profile update with middleware "isAuthenticated" for verfification .
2.  Create middlewares folder and create file isAuthenticated.js and get token from cookies which is passed 
during user login. Now decode that token with jwt.verify method and pass the jwt key from env. After decoding 
token successfully, get userId from from that token and pass it to req and call next().
3. We will then use Insomnia to check request for different API;s like http://local:8000/api/v1/user/login and 
see the response. If the response is valid and working according to controllers defined, this means api is working fine and ready to go.


Commit 6 : Company Controller & API Routes
1. Create company.controller.js  in backend folder for company registration, get companies created by a user ,get company by id and update company controller.
2. Company Registration controller first checks company name in req.body . If its present, it gives error of company already present. If its a new company name, it will get created in Company database.
3. Next we will make controller which gets companies made by a logged in user. We first get the user id by by  
req.id, then we find that id in Company database. If no comapnies excist, we give error that no company found. Elso we give error 
4. If we wanna get company by its id, we make a getCompanyById controller and get its id from prams. Then we find that id from prams in database, if id excists, we show that company in response.
5. Lastly we will create update company controller by using findByIdandUpdate method. In updating profile, we
used manual save method for updating data. In update company profile controller, we first check get the data via 
req,body, then we get id by params and update data in object. Then we use findByIdAndUpdate method to first get company id and pass that updated object data and rule new:true. We then pass that data via response to user.
6. We then create a company route and use exress.router for defining routes for registering company, updating company data, get company data via id and all use companies by user id.
7. We then import these routes in index.js and defined a route for company APIs.
8. After that test these routes defined in Insomnia like http://localhost:8000/api/v1/company/register and test those API routes. After all routes are tested, save them.
 

Commit 7 : Job Controller & API Routes
1. We first create a job controller.js file in controller folder.
2. After that, we create controllers for creating a job, controller for getting job by a query , controller for
getting job by an id and a controller for getting all jobs posted by admin.
3. We then define the routes of these controllers in job.routes.js files in routes folder.
4. After exporting them to index file, we define API for job routes.
5. We then use Insomnia to test different routes like http://localhost:8000/api/v1/job/post and test for responses. If getting correct results, save them. 


Commit 8 : Application Controller & API Routes
1. We now create an application controller in controller folder.
2. In the application controller, we create applyJob controller which allow user to apply for jobs, a getAppliedJobs controller which allow users to check jobs they applied for. Then we will create an getApplication controller which allows admin to check how many applicants applied. Finally we create an update
application controller which allow admins to update status of application to accepted/rejected etc.
3. After that we defined routes for applyJob, getAppliedJobs, getApplications and updateApplicationStatus controllers.
4. Then in index.js we we dine routes for Application APIs defined.
5. Finally, we use Insomnia to test API routes like http://localhost:8000/api/v1/application/apply/:id for posting job etc. 


Commit 9 : Created Navbar Component and FrontEnd Setup
1: First we install node modules folder by npm create react app and install other dependencies like react-dom, react-router-dom. react-scripts and redux persist. 
2. After that we create index.html in public folder and link Bootstrap cdns along with font-awesome cdn and use a fav icon. Also we will create a div with id root which will get rendered in index.js of frontend.
3. Now we will create app.js file which will import BrowserRouter, Routes, Route from react router dom. Then we will import other functional components and pages we wanna route to. Then we will give each Route a path for the page we wanna redirect to.
4. After that we  will create header.js in components folder and home.js in pages and export them to app.js for 
rendering.
5. An index.js file will now be created where we will import App.js, index.css, react and router dom and create root with react Dom and place App component in it.
6. In package.js, we will replace proxy with local host port number for front end.

Commit 10 : Login and Sign Up Page UI Setup with Login API 
1. We created Login and Sign Up page UI and passed them their respective route.
2. Second in login page we use handlechange and set form data states and send data via api response.
3. We also use handle Submit to get the submit data and pass it to backend.
4. Upon success or failure, we show error or success message respectively.

Commit 11 : Sign Up Page File To Url Conversion
1. In sign up  pages for file loading capability, I use axios.post and used form data to append new data. 
2. Then we use multer which acts as a middleware for checking and storing file temporarily.
3. After that, cloudinary api logins are passed in env file and used in cloudinary.js. Then we import both in index.js.
4. Before uploading to cloudinary, file is passed in dataUri to parse file name and its data.
5. Lastly, after parsing data in dataUri, file is uploaded on cloudinfary and link is passed. 


Commit 12 : SetUp Redux For Login and Signup Page
1. Set up loading state for redux in auth Slice js file.
2. Then we store this file in Store.js
3. The by importing it via usestate, we use the fuctions defined in UserSlice js using dispath

Commit 13: Hero Section and Category Section UI Setup
1. Hero Section is made using Hero Section component
2. Categories are made using botstrap carousel
 
Commit 14 : HomePage UI Build
1. In this section, we build components of homepage like Latest Job Openings, job cards and designed Footer UI


Commit 15  : Filtered Jobs Component on Job Page UI (WIP-I)
1. Working on Filtered job component which will help filtering jobs on various condition on jobs page. (WIP)

Commit 16  : Completed Filtered Jobs Component on Job Page and Browse Page UI
1. Filtered job component will help filtering jobs on various condition on jobs page.
2. While Browse Page Will Show All the Job Listings 


Commit 17  : View Profile Page UI Completed
1. View Profile Page UI has details of user like email, phone number, jobs applied and all that

Commit 18  : Job Description Page UI Completed
1. Job Description Page UI is finished which will show listing details of job cards

Commit 19  : Update Profile Dialog Box UI 
1. Update profile dialog box UI is setup along with its backend functionality (WIP-I)


Commit 20  : Update Profile Dialogue Bugs Solved
1. Solved the errors on update profile dialogue box.


Commit 21 : Cloudinary PDF Issue Resolved
1. Solved the cloudinary issue of pdf which is in security settings of Cloudinary to enable

Commit 22 : User Log Out Functionality
1. Used the logout api repsonse in header component to logout user and clear the user data in Redux.

Commit 23 : Job Data Fetched Through Hook
1. Create a hook folder and create useGetAllJobs hook file to fetch data through useEffect so that data is displayed on homepage and on the redux.
2. Then we use the updated data from redux using use State of Job slice and fetch and display data on homepage and JOb page.

Commit 24 : Already Applied Job Functionality
1. Check if user has already applied to job or not by checking through applicants in job returned data.

Commit 25 : Apply to Job Functionality 
1. Used jobApplyHandler function to click on Apply job if user has not already applied.
2. If user didnt applied, we used setJobDesc api and update the apply status

Commit 25 : Adding Private Routes to Website
1. Used Private routes to redirect if not logged in to Login Page  
2. Added Persist reducer in app.js and store to save data so it dont get lost on reloading

Commit 26 : Recruiter Login Route Setup
1. Set up condiition in Navbar so that View profile option is disable for recruiter logins.
2. Similarly, added a condition on homepage using useEffect that if role is recruiter, show company dashboard instead of users  

Commit 27 : Admin Comapny Dashboards Setup
1. Complete homepage UI dashboard of Companies listed by Admin
2. Create a add company page to add company to DB

Commit 28 : Add Comapny Info Setup
1. Used a useEffect to get excitsing company info.
2. Then use axios.put to update the data via formDataObject

Commit 29 : Admin Companies Rendered on Table 
1. Used a hook useGetAllAdmiinCompanies to get all companies.
2. Then use this hook on comapny page to show all comapnies on table

Commit 30 : Filter Search Company Functionality
1. First we have to get the input by onChange handler. Then declare a useState for that input.
2. Declare a searchInput text in slice.
3. Then use a useEffect for the input text every time it changes and dispatch it to slice.
4. Then use that input to the text we wanna compare to by using filtering

Commit 31 : Add/Edit a Job Functionality
1. Admins can now edit or add new jobs just like adding companies.

Commit 32 : Search Job Functionality
1. Admins can now search for jobs using keyword of companies or job titles.

Commit 33 : Delete Company From Dashboard
1. On Companies Dashboard of admin, when user clicks delete icon, company gets deleted from DB

Commit 34 : Delete Job When Company deleted
1. When company is deleted from dashboard, it also deletes the job linked with this company

Commit 35 : Delete Applications When Company/Job deleted
1. When user clicks on delete company or job, it delete application of appicants in DB linked to it.

Commit 36 : Update/Reject Application Status
1. When user clicks on status button, it is updated accordingly in the User Jobs Status.

Commit 37 : Update User Applied Jobs Table
1. User Applied jobs status gets updated when admin approves  or reject his application.

Commit 38 : Search Jobs on Browse Page
1. Users can now search jobs on homepage or click on category carousels to see jobs on Browse page

Commit 39 : Search Jobs on Filter Page
1. Search Jobs on filter page functioanlity completed

Commit 40 : View Company Page UI
1. Now admin can view info about the companies they listed and how many jobs are posted by it.

Commit 41 : Responsiveness & Other Route Changes
1. Adjusted table responsive and routes logic for admins and users

Commit 42 : Reset Password
1. Reset Password using nodemail functioanlity

Commit 43 : Render Deployment
1. Deployment steps for index.js and package.json file 


